1.Create a python class MathOperations with static methods basic mathematical operations such as addition,
substraction, multiplication and division. Also, include a class variable PI for the value of PI

import math
class Mathoperations:
    PI = 3.414
    @staticmethod
    def add(x,y):
        print(x+y)
    @staticmethod
    def sub(x,y):
        print(x-y)
    @staticmethod
    def mul(x,y):
        print(x*y)
    @staticmethod
    def div(x,y):
        print(x/y)

obj=Mathoperations()
obj.add(2,5)
obj.sub(5,3)
obj.mul(2,2)
obj.div(10,2)
print(Mathoperations.PI)
.............................................................................................................

2)Implement a python class FileUtility with static methods for reading and writing files. Include
methods for reading text files, writing to text files and copying files

import shutil

class FileUtility:
    @staticmethod
    def read_text_file(file_path):
        try:
            with open(file_path, 'r') as file:
                return file.read()
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
            return None
        except Exception as e:
            print(f"Error occurred while reading file '{file_path}': {e}")
            return None
    
    @staticmethod
    def write_text_file(file_path, content):
        try:
            with open(file_path, 'w') as file:
                file.write(content)
            print(f"Text content successfully written to '{file_path}'.")
        except Exception as e:
            print(f"Error occurred while writing to file '{file_path}': {e}")
    
    @staticmethod
    def copy_file(source_path, destination_path):
        try:
            shutil.copyfile(source_path, destination_path)
            print(f"File copied from '{source_path}' to '{destination_path}'.")
        except FileNotFoundError:
            print(f"Error: Source file '{source_path}' not found.")
        except Exception as e:
            print(f"Error occurred while copying file from '{source_path}' to '{destination_path}': {e}")

# Example usage:
# Reading a text file
content = FileUtility.read_text_file("example.txt")
if content:
    print("Content of example.txt:")
    print(content)

# Writing to a text file
FileUtility.write_text_file("output.txt", "This is a test content.")

# Copying a file
FileUtility.copy_file("example.txt", "example_copy.txt")
...............................................................................................................
Task:
   write a python program which hits the API and check the response

import requests
def check_api_response(api_url):
    try:
        response = requests.get(api_url)
        if response.status_code == 404:
            print("API is reachable. Response content:")
            print(response.json())  # Assuming the response is JSON
        else:
            print(f"Failed to hit the API. Status code: {response.status_code}")
    except request.RequestsException as e:
        print(f"Error occurred while sending request: {e}")

# Example usage:
api_url = "https://reqres.in/api/users/23" # Example API URL
check_api_response(api_url)


output:

API is reachable. Response content:
{}
.....................................................................
Task:

4) Design  python class GeometryHelper with static methods for calculating the area and perimeter of 
common geometry shapes such as circles, rectangles, and tyriangles. Include class variablew for default values
such as the value of PI and standard lenghts.

import math

class GeometryHelper:
    PI = math.pi  # Class variable for the value of PI
    STANDARD_LENGTH = 1  # Class variable for standard lengths

    @staticmethod
    def circle_area(r):
        print(GeometryHelper.PI * r ** 2)

    @staticmethod
    def circle_perimeter(r):
        print(2 * GeometryHelper.PI * r)

    @staticmethod
    def rectangle_area(l,b):
        print(l*b)

    @staticmethod
    def rectangle_perimeter(l, b):
        print(2 * (l + b))

    @staticmethod
    def triangle_area(b, h):
        print(0.5 * b * h)

    @staticmethod
    def triangle_perimeter(a,b,c):
        print(a+b+c)
obj=GeometryHelper()
obj.circle_area(5)
obj.circle_perimeter(5)
obj.rectangle_area(5,6)
obj.rectangle_perimeter(5,6)
obj.triangle_area(1,2)
obj.triangle_perimeter(1,2,3)
 
OUTPUT:


78.53981633974483
31.41592653589793
30
22
1.0
6
..................................................................................

5)write a program which explains methodoveriding and method overloading

methodoveriding

class A:
    def display(self):
        print("this is A")

class B(A):
    def display(self):
        print("this is B")
        super().display()

obj=B()
obj.display()

output:
this is B
this is A



method overloading
class Main:
    def sum(self,a=2,b=2):
        print(a+b)
    def sum(self,a,b,c):
        print(a+b+c)
obj=Main()
obj.sum(1,2,3)

output:

6
......................................................................


>>>UPGRADE PIP IN YOUR SYSTEM TO LATEST VERSION


pip3 install pip          output:24.0 ---> upgraded version
.................................................................................
9)CREATE A VIRTUAL ENVIRONMENT (VENV) IN YOUR SYSTEM

pip install virtualenv
..............................................................................
3)design a python class ConfigParser with static methods for parsing configuration files in different formats
( e.g json , yaml). Include class variables for default configuration file path and formats.
................................................................................
4)CREATE A PACKAGE FOLDER WITH TWO MODULE FILES CONTAINING 4 FUNCTIONS AND IMPORT THE 
PACKAGE WITH TWO SPECIFIC FUNCTIONS(MODULE1.PY,MODULE2.PY)